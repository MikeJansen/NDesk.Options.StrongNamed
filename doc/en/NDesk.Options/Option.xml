<Type Name="Option" FullName="NDesk.Options.Option">
  <TypeSignature Language="C#" Value="public abstract class Option" />
  <AssemblyInfo>
    <AssemblyName>NDesk.Options</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>
    All members of this type are safe for multithreaded operations.
    Subclasses must be thread-safe if multithreaded invocation of 
    <see cref="M:NDesk.Options.OptionSet.Parse(System.Collections.Generic.IEnumerable&lt;string&gt;)" />
    is required.
  </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      Represents information about an option.
    </summary>
    <remarks>
      <para>
        Instances of <see cref="T:NDesk.Options.Option" /> are created via
        the various <see cref="T:NDesk.Options.OptionSet" /><c>Add</c>
        overloads, such as:
      </para>
      <list type="bullet">
        <item>
          <term>
            <see cref="M:NDesk.Options.OptionSet.Add(System.String,System.Action{System.String})" />
          </term>
        </item>
        <item>
          <term>
            <see cref="M:NDesk.Options.OptionSet.Add(System.String,System.String,System.Action{System.String})" />
          </term>
        </item>
        <item>
          <term>
            <see cref="M:NDesk.Options.OptionSet.Add(System.String,System.Action{System.String,NDesk.Options.OptionContext})" />
          </term>
        </item>
        <item>
          <term>
            <see cref="M:NDesk.Options.OptionSet.Add(System.String,System.String,System.Action{System.String,NDesk.Options.OptionContext})" />
          </term>
        </item>
      </list>
      <para>
        You can also add custom <see cref="T:NDesk.Options.Option" /> 
        subclasses to an <see cref="T:NDesk.Options.OptionSet" /> via the 
        <see cref="T:System.Collections.ObjectModel.Collection{NDesk.Options.Option}.Add(`0)" />
        method.
      </para>
      <block subset="none" type="overrides">
        Inheritors of this type must override the <see langword="abstract" /> method
        <see cref="M:NDesk.Options.Option.OnParseComplete(NDesk.Options.OptionContext)" />,
        which is (indirectly) invoked from within 
        <see cref="M:NDesk.Options.OptionSet.Parse(System.Collections.Generic.IEnumerable{System.String}" />
        when an option matching one of the <paramref name="prototype" />
        aliases is encountered.
      </block>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Option (string prototype, string description);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prototype" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prototype">
          A <see cref="T:System.String" /> containing a <c>|</c>-separated
          list of option names (aliases) and an optional value-type specifier.
        </param>
        <param name="description">
          A <see cref="T:System.String" /> containing documentation for the
          option.
        </param>
        <summary>
          Creates and initializes a new instance of the 
          <see cref="T:NDesk.Options.Option" /> class.
        </summary>
        <remarks>
          <para>
            This constructor initializes the 
            <see cref="P:NDesk.Options.Option.Prototype" /> property of the
            new instance using <paramref name="prototype" />, and the 
            <see cref="P:NDesk.Options.Option.Description" /> property of the
            new instance using <paramref name="description" />.
          </para>
          <para>
            <paramref name="prototype" /> is a <c>|</c>-separated list of
            option names.  It should be listed in shortest-to-longest order,
            e.g. <c>h|help</c>.  <paramref name="prototype" /> may contain a
            <see cref="T:NDesk.Options.OptionValueType" /> specifier following
            one of the <c>|</c>-separated entries.
          </para>
          <para>
            The <see cref="P:NDesk.Options.Option.OptionValueType" /> property
            is initialized based on whether a <c>=</c> or <c>:</c> follows one
            of the aliases within <paramref name="prototype" />.
            <c>=</c> specifies a 
            <see cref="F:NDesk.Options.OptionValueType.Required" /> value,
            while <c>:</c> specifies an 
            <see cref="F:NDesk.Options.OptionValueType.Optional" /> value.  
            If neither <c>=</c> nor <c>:</c> is not specified, then 
            <see cref="F:NDesk.Options.OptionValueType.None" /> is used.
            The value specifier may be used anywhere within 
            <paramref name="prototype" />, so <c>n|name=</c>, <c>n=|name</c> 
            and <c>n=|name=</c> are equivalent, but you cannot mix types; 
            <c>n:|name=</c> is invalid.
          </para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="prototype" /> is the empty string <c>""</c>.
          </para>
          <para>-or-</para>
          <para>
            <paramref name="prototype" /> contains an empty alias, such as
            <c>a||b</c>.
          </para>
          <para>-or-</para>
          <para>
            Conflicting <see cref="T:NDesk.Options.OptionValueType" /> values
            were found within <paramref name="prototype" />.
          </para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="prototype" /> is <see langword="null" />.
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          A <see cref="T:System.String" /> containing documentation for this
          option.
        </summary>
        <value>
          A <see cref="T:System.String" /> containing documentation for this
          option.
        </value>
        <remarks>
          This property is used to generate documentation within 
          <see cref="M:NDesk.Options.OptionSet.WriteOptionDescriptions(System.IO.TextWriter)" />.
          The string returned is translated via the 
          <paramref name="localizer" /> parameter provided to the
          <see cref="C:NDesk.Options.OptionSet(System.Converter{System.String,System.String})" />
          constructor before being written to the 
          <see cref="T:System.IO.TextWriter" /> instance.
        </remarks>
        <altmember cref="M:NDesk.Options.OptionSet.WriteOptionDescriptions(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public string[] GetNames ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves all aliases that make up 
          <see cref="P:NDesk.Options.Option.Prototype" />.</summary>
        <returns>
          A <see cref="T:System.String" /> array containing all name aliases
          for this <see cref="T:NDesk.Options.Option" /> instance.
        </returns>
        <remarks>
          The returned option names will not contain any 
          <see cref="T:NDesk.Options.OptionValueType" /> specifier that may be
          within <see cref="P:NDesk.Options.Option.Prototype" />.  
          If <see cref="P:NDesk.Options.Option.Prototype" /> is
          <c>a=|b=|c=</c>, the array returned will contain <c>a</c>, <c>b</c>,
          and <c>c</c>.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (NDesk.Options.OptionContext c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="NDesk.Options.OptionContext" />
      </Parameters>
      <Docs>
        <param name="c">
          An <see cref="T:NDesk.Options.OptionContext" /> instance containing
          information about the option that was parsed.
        </param>
        <summary>
          Invokes 
          <see cref="T:NDesk.Options.Option.OnParseComplete(NDesk.Options.OptionContext" />
          then clears out <paramref name="c" />.
        </summary>
        <remarks>
          <para>
            This method is invoked from within 
            <see cref="M:NDesk.Options.OptionSet.Parse(System.String,NDesk.Options.OptionContext)" />
            when an option matching 
            <see cref="M:NDesk.Options.Option.GetNames" /> is encountered with
            the provided value (if a value is required or optional).
          </para>
          <block subset="none" type="behaviors">
            <para>
              This method invokes 
              <see cref="M:NDeks.Options.Option.OnParseComplete(NDesk.Options.OptionContext)" />,
              passing along <paramref name="c" /> unchanged, and then sets the 
              following <see cref="T:NDesk.Options.OptionContext" /> properties 
              on <paramref name="c" /> to <see langword="null" />: 
            </para>
            <list type="bullet">
              <item>
                <term>
                  <see cref="P:NDesk.Options.OptionContext.Option" />
                </term>
              </item>
              <item>
                <term>
                  <see cref="P:NDesk.Options.OptionContext.OptionName" />
                </term>
              </item>
              <item>
                <term>
                  <see cref="P:NDesk.Options.OptionContext.OptionValue" />
                </term>
              </item>
            </list>
          </block>
        </remarks>
        <altmember cref="M:NDesk.Options.Option.OnParseComplete(NDesk.Options.OptionContext)" />
        <altmember cref="M:NDesk.Options.OptionSet.Parse(System.String,NDesk.Options.OptionContext)" />
        <altmember cref="M:NDesk.Options.OptionSet.Parse(System.Collections.Generic.IEnumerable{System.String}" />
      </Docs>
    </Member>
    <Member MemberName="OnParseComplete">
      <MemberSignature Language="C#" Value="protected abstract void OnParseComplete (NDesk.Options.OptionContext c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="NDesk.Options.OptionContext" />
      </Parameters>
      <Docs>
        <param name="c">
          An <see cref="T:NDesk.Options.OptionContext" /> instance containing
          information about the option that was parsed.
        </param>
        <summary>
          Perform an action when an option is parsed.
        </summary>
        <remarks>
          <para>
            This method must be overridden by all subclasses, within which the
            subclass can perform some custom per-option processing.
          </para>
          <para>
            This method is invoked from within 
            <see cref="M:NDesk.Options.OptionSet.Parse(System.String,NDesk.Options.OptionContext)" />
            when an option matching 
            <see cref="M:NDesk.Options.Option.GetNames" /> is encountered with
            the provided value (if a value is required or optional).
          </para>
        </remarks>
        <example>
          <para>
            The following example has a custom 
            <see cref="T:NDesk.Options.Option" /> subclass which overrides
            <see cref="M:NDesk.Options.Option.OnParseComplete(NDesk.Options.OptionContext)" />:
          </para>
          <code lang="C#" src="examples/subclass.cs">// Case-Insensitive OptionSet
using System;
using System.Collections.Generic;
using NDesk.Options;

class DemoOptionContext : OptionContext {
	public string OptionKey;
}

class DemoOptionSet : OptionSet {
	protected override void InsertItem (int index, Option item)
	{
		if (item.Prototype.ToLower () != item.Prototype)
			throw new ArgumentException ("prototypes must be lower-case!");
		base.InsertItem (index, item);
	}

	protected override OptionContext CreateOptionContext ()
	{
		return new DemoOptionContext ();
	}

	protected override bool Parse (string option, OptionContext c)
	{
		DemoOptionContext d = (DemoOptionContext) c;
		// Prevent --a --b
		string f, n, v;
		bool haveParts = GetOptionParts (option, out f, out n, out v);
		Option nextOption = haveParts ? GetOptionForName (n.ToLower ()) : null;
		if (haveParts &amp;&amp; c.Option != null) {
			if (nextOption == null)
				; // ignore
			else if (c.Option.OptionValueType == OptionValueType.Optional) {
				c.OptionValue = null;
				c.Option.Invoke (c);
			}
			else 
				throw new OptionException (
					string.Format ("Found option value `{0}' for option `{1}'.",
						option, c.OptionName), c.OptionName);
		}

		// option name already found, so `option' is the option value
		if (c.Option != null) {
			if (c.Option is KeyValueOption &amp;&amp; d.OptionKey == null) {
				HandleKeyValue (option, d);
				return true;
			}
			return base.Parse (option, c);
		}

		if (!haveParts)
			// Not an option; let base handle as a non-option argument.
			return base.Parse (option, c);

		// use lower-case version of the option name.
		if (nextOption != null &amp;&amp; nextOption is KeyValueOption) {
			d.Option     = nextOption;
			d.OptionName = f + n.ToLower ();
			HandleKeyValue (v, d);
			return true;
		}
		return base.Parse (f + n.ToLower () + (v != null ? "=" + v : ""), c);
	}

	static void HandleKeyValue (string option, DemoOptionContext d)
	{
		if (option == null)
			return;
		string[] parts = option.Split ('=');
		if (parts.Length == 1) {
			d.OptionKey = option;
			return;
		}
		d.OptionKey   = parts [0];
		d.OptionValue = parts [1];
		if (d.Option != null) {
			d.Option.Invoke (d);
		}
	}

	class KeyValueOption : Option {
		public KeyValueOption (string prototype, Action&lt;string,string,OptionContext&gt; action)
			: base (prototype, null)
		{
			this.action = action;
		}

		Action&lt;string,string,OptionContext&gt; action;

		protected override void OnParseComplete (OptionContext c)
		{
			DemoOptionContext d = (DemoOptionContext) c;
			action (d.OptionKey, d.OptionValue, d);
			d.OptionKey = null;
		}
	}

	public new DemoOptionSet Add (string prototype,
		Action&lt;string,string,OptionContext&gt; action)
	{
		base.Add (new KeyValueOption (prototype, action));
		return this;
	}
}

class Demo {
	public static void Main (string[] args)
	{
		bool show_help = false;
		List&lt;string&gt; names = new List&lt;string&gt; ();
		Dictionary&lt;string,string&gt; map = new Dictionary&lt;string,string&gt; ();
		int repeat = 1;

		OptionSet p = new DemoOptionSet () {
			{ "n|name=",    v =&gt; names.Add (v) },
			{ "r|repeat:",  (int v) =&gt; repeat = v },
			{ "m|map=",     (k,v,c) =&gt; map.Add (k, v) },
		};

		List&lt;string&gt; extra;
		try {
			extra = p.Parse (args);
		}
		catch (OptionException e) {
			Console.Write ("subclass: ");
			Console.WriteLine (e.Message);
			return;
		}

		string message;
		if (extra.Count &gt; 0) {
			message = string.Join (" ", extra.ToArray ());
		}
		else {
			message = "Hello {0}!";
		}

		foreach (string name in names) {
			for (int i = 0; i &lt; repeat; ++i)
				Console.WriteLine (message, name);
		}
		List&lt;string&gt; keys = new List&lt;string&gt;(map.Keys);
		keys.Sort ();
		foreach (string key in keys) {
			Console.WriteLine ("Key: {0}={1}", key, map [key]);
		}
	}
}

</code>
          <para>
            See <see cref="T:NDesk.Options.OptionSet" /> for more on this
            example.
          </para>
        </example>
        <altmember cref="M:NDesk.Options.Option.Invoke(NDesk.Options.OptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="OptionValueType">
      <MemberSignature Language="C#" Value="public NDesk.Options.OptionValueType OptionValueType { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NDesk.Options.OptionValueType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          An <see cref="T:NDesk.Options.OptionValueType" /> instance
          specifying whether this <see cref="T:NDesk.Options.Option" /> takes
          a value, and if so, whether it's required or optional.
        </summary>
        <value>
          An <see cref="T:NDesk.Options.OptionValueType" /> specifying whether
          a value is required for this value.
        </value>
        <remarks>
          <para>
            This is initialized based on the presence of <c>=</c> or
            <c>:</c> within <see cref="P:NDesk.Options.Option.Prototype" />.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prototype">
      <MemberSignature Language="C#" Value="public string Prototype { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          The <see cref="T:NDesk.Options.Option" /> prototype, containing
          option name aliases and the option value requirements.
        </summary>
        <value>
          A <see cref="T:System.String" /> containing the prototype of this
          <see cref="T:NDesk.Options.Option" /> instance.
        </value>
        <remarks>
          The prototype contains a <c>|</c>-separated list of all option name
          aliases and a value specifier of <c>=</c> for required values and
          <c>:</c> for optional values; if neither <c>=</c> nor <c>:</c> is
          present, no value is taken.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          Returns <see cref="P:NDesk.Options.Option.Prototype" />.
        </summary>
        <returns>
          A <see cref="T:System.String" /> containing
          <see cref="P:NDesk.Options.Option.Prototype" />.
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
